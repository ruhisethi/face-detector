{
  "version": 3,
  "file": "static/js/602.f3d228a2.chunk.js",
  "mappings": "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",
  "sources": [
    "components/videoElement.jsx",
    "utils/axios.js",
    "controls/axios_ctrl.js",
    "components/userCard.jsx",
    "pages/Login.jsx",
    "utils/face_detect.js"
  ],
  "sourcesContent": [
    "import React, { useEffect } from \"react\";\r\nimport { getsnap, init, loadModels, stopVideo } from \"../utils/face_detect\";\r\nimport \"../styles/videoElement.css\";\r\nimport { useAppContext } from \"../configs/AppContext\";\r\n\r\nexport async function getSnap() {\r\n    return await getsnap();\r\n}\r\n\r\nexport default function VideoElement() {\r\n  const { video } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    async function __init() {\r\n        //   await init();\r\n        await loadModels(init);\r\n      trackChanges();\r\n    }\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) {\r\n        stopVideo();\r\n        document.querySelector(\"canvas\")?.remove();\r\n        cancelAnimationFrame(video.current);\r\n      } else {\r\n        __init();\r\n      }\r\n    };\r\n\r\n    const trackChanges = () => {\r\n      video.current = requestAnimationFrame(trackChanges);\r\n    };\r\n\r\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n    __init();\r\n\r\n    return () => {\r\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n      stopVideo();\r\n      document.querySelector(\"canvas\")?.remove();\r\n      cancelAnimationFrame(video.current);\r\n    };\r\n  }, [video]);\r\n\r\n  return (\r\n    <div className=\"video_container\">\r\n      <video\r\n        id=\"facecam\"\r\n        width=\"680\"\r\n        height=\"560\"\r\n        className=\"\"\r\n        autoPlay\r\n        muted\r\n      ></video>\r\n    </div>\r\n  );\r\n}",
    "import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.API_URL || 'http://localhost:8000',\r\n    timeout: 1000,\r\n    headers: { 'X-Custom-Header': 'foobar' }\r\n});\r\n\r\nexport default instance;",
    "import instance from '../utils/axios';\r\n\r\nexport async function getUser(fD) {\r\n    try {\r\n        // console.log(fD);\r\n        const res = await instance.post('/login', {fD});\r\n        return res.data;\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function setUser(fD) {\r\n    try {\r\n        const res = await instance.post('/register', fD);\r\n        return res.data;\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}",
    "import React from 'react';\r\nimport { useAppContext } from '../configs/AppContext';\r\nimport '../styles/UserCard.css';\r\n\r\nexport default function UserCard() {\r\n    const { user } = useAppContext();\r\n    return (\r\n        <div className='Usercard'>\r\n            {(user === null) ? (<h2>No User Found</h2>) :\r\n                <>\r\n                    <h2>User Card</h2>\r\n                    <img src={user.img} alt=\"User\" />\r\n                    <p>Name: {user.name}</p>\r\n                    <p>Email: {user.email}</p>\r\n                    <p>Roll No: {user.rollNo}</p>\r\n                </>\r\n            }\r\n        </div>\r\n        );\r\n}",
    "import React, { useEffect } from \"react\";\r\nimport VideoElement from \"../components/videoElement.jsx\";\r\n// eslint-disable-next-line\r\n// import { compare_face } from \"../utils/face_detect\";\r\nimport { useAppContext } from \"../configs/AppContext\";\r\nimport UserCard from \"../components/userCard.jsx\";\r\nimport { getUser } from \"../controls/axios_ctrl\";\r\nimport \"../styles/login.css\";\r\nimport { getFaceData, getsnap } from \"../utils/face_detect\";\r\n\r\nexport default function Login() {\r\n    const { setUser, setError, video } = useAppContext();\r\n\r\n    async function handleLogin() {\r\n        const img = await getsnap();\r\n        // const img = await loadModels(getsnap);\r\n        if (!img) {\r\n            return false;\r\n        }\r\n        // console.log(img);\r\n        const fD = await getFaceData(img);\r\n        // const fD = await loadModels(await getFaceData(img));\r\n        if (!fD || fD.length === 0) {\r\n            return;\r\n        }\r\n        const result = await getUser(fD);\r\n        // console.log(result);\r\n        return result;\r\n    }\r\n    useEffect(() => {\r\n        // console.log(\"Login page loaded\");\r\n        const interval = setInterval(async () => {\r\n            if (video) {\r\n                try {\r\n                    const result = await handleLogin();\r\n                    if (result && result.user) {\r\n                        setUser(result.user);\r\n                        setError({\r\n                            message: \"User found\",\r\n                            type: \"success\",\r\n                            status: 200,\r\n                        })\r\n                        setTimeout(() => {\r\n                            setUser(null);\r\n                        }, 5000);\r\n                        // clearInterval(interval);\r\n                    } else if (result && result.message) {\r\n                        setUser(null);\r\n                        setError({\r\n                            message: result.message,\r\n                            type: \"error\",\r\n                            status: 404,\r\n                        });\r\n                    }\r\n                } catch (error) {\r\n                    setError(error.message);\r\n                }\r\n            }\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [video, setError, setUser]);\r\n    return (\r\n        <>\r\n            <div className=\"Login\">\r\n                <h1>Login</h1>\r\n                <div className=\"login__container\">\r\n                    <VideoElement />\r\n                    <UserCard />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}",
    "import * as faceapi from 'face-api.js';\r\nvar video = document.getElementById(\"facecam\");\r\n\r\nexport const loadModels = async (func) => {\r\n    const MODEL_URL = \"./models\";\r\n    \r\n    try {\r\n        await Promise.all([\r\n            // faceapi.nets.tinyYolov2.loadFromUri(MODEL_URL),\r\n            faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\r\n            faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\r\n            faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\r\n            faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL),\r\n        ]).then(async() => {\r\n            // console.log(\"Models loaded successfully\");\r\n            return await func();\r\n        }).catch((error) => {\r\n            console.error(\"Error loading models:\", error);\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error loading models:\", error);\r\n    }\r\n};\r\n\r\nexport const init = async () => {\r\n    await captureVideo();\r\n    if (video) {\r\n        video.addEventListener(\"play\", async() => {\r\n            await draw_face();\r\n        });\r\n        return video;\r\n    }\r\n};\r\n\r\nconst handleSuccess = (stream) => {\r\n    video = document.getElementById(\"facecam\");\r\n    video.srcObject = stream;\r\n};\r\n\r\nconst handleError = (error) => {\r\n    console.error(\"Error accessing media devices.\", error);\r\n};\r\n\r\nexport const captureVideo = async () => {\r\n    const constraints = {\r\n        video: true,\r\n    };\r\n    try {\r\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n        handleSuccess(stream);\r\n    } catch (error) {\r\n        handleError(error);\r\n    }\r\n};\r\n\r\nexport const draw_face = async () => {\r\n    if (!video) return;\r\n    const canvas = faceapi.createCanvasFromMedia(video);\r\n    if (!(document.querySelectorAll(\"canvas\").length > 0)) {\r\n        video.style.position = \"relative\";\r\n        video.style.zIndex = \"1\";\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.zIndex = \"1000\";\r\n        canvas.style.top = video.offsetTop + \"px\";\r\n        canvas.style.left = video.offsetLeft + \"px\";\r\n\r\n        document.body.append(canvas);\r\n    }\r\n    const displaySize = { width: video.width, height: video.height };\r\n    faceapi.matchDimensions(canvas, displaySize);\r\n\r\n    setInterval(async () => {\r\n        const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n        const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n        canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\r\n        faceapi.draw.drawDetections(canvas, resizedDetections);\r\n    }, 200);\r\n\r\n};\r\n\r\nexport const loadFace = (faceData) => {\r\n\r\n    if (!faceData || !faceData[0].descriptor || typeof faceData[0].descriptor !== 'object') {\r\n        console.log(typeof faceData[0].descriptor);\r\n        return null;\r\n    }\r\n\r\n    const descriptorArray = Object.values(faceData[0].descriptor);\r\n    const descriptor = [new Float32Array(descriptorArray)];\r\n    return [new faceapi.LabeledFaceDescriptors(faceData.name, descriptor)];\r\n};\r\n\r\nexport const compare_face = async (fD) => {\r\n    if (!video) return false;\r\n    // console.log(fD);\r\n    const faceData = loadFace(fD);\r\n    if (!faceData) return false;\r\n    // console.log(faceData);\r\n    const singleResult = await faceapi.detectSingleFace(video).withFaceLandmarks().withFaceDescriptor();\r\n    if (!singleResult) return false;\r\n    const faceMatcher = new faceapi.FaceMatcher(faceData);\r\n    const bestMatch = faceMatcher.findBestMatch(singleResult.descriptor);\r\n    if (bestMatch.distance < 0.5) {\r\n        return { name: fD.name, email: fD.email, rollNo: fD.rollNo, img: fD.img };\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const stopVideo = () => {\r\n    if (video && video.srcObject) {\r\n        // console.log(video.srcObject);\r\n        const stream = video.srcObject;\r\n        const tracks = stream.getTracks();\r\n        tracks.forEach(track => track.stop());\r\n    }\r\n};\r\n\r\nexport const getsnap = async () => {\r\n    if (!video) return;\r\n    Array.from(document.querySelectorAll(\"canvas\")).forEach((c) => c.remove());\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\r\n    return canvas.toDataURL(\"image/jpeg\");\r\n    // return image;\r\n}\r\n\r\nexport const getImgData = async (image) => {\r\n    if (!image) return;\r\n    const img = await faceapi.fetchImage(image);\r\n    const detections = await faceapi.detectAllFaces(img, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n    if (!detections || detections.length === 0) return;\r\n    const result = detections.map((detection) => {\r\n        return {\r\n            descriptor: detection.descriptor,\r\n            landmarks: detection.landmarks,\r\n        };\r\n    });\r\n    return result;\r\n}\r\nexport const getFaceData = async () => {\r\n    if (!video) return;\r\n    const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n    if (!detections || detections.length === 0) return;\r\n    const result = detections.map((detection) => {\r\n        return {\r\n            descriptor: detection.descriptor,\r\n            landmarks: detection.landmarks,\r\n        };\r\n    });\r\n    return result;\r\n};\r\n\r\nexport const getFaceLandmarks = async () => {\r\n    if (!video) return;\r\n    const detections = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks();\r\n    return detections;\r\n};\r\n\r\nexport const detectimg = async (img) => {\r\n    return draw_face_img(img);\r\n};\r\n\r\nexport const draw_face_img = async (img) => {\r\n    const canvas = faceapi.createCanvasFromMedia(img);\r\n    if (!(document.querySelectorAll(\"canvas\").length > 0)) {\r\n        img.style.zIndex = \"1\";\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.zIndex = \"1000\";\r\n        canvas.style.top = (img.offsetTop) + \"px\";\r\n        canvas.style.left = (img.offsetLeft) + \"px\";\r\n        // console.log(img.offsetTop, img.offsetLeft);\r\n        // console.log(canvas.style.top, canvas.style.left);\r\n\r\n        // document.body.append(canvas);\r\n    }\r\n    const displaySize = { width: img.width, height: img.height };\r\n    faceapi.matchDimensions(canvas, displaySize);\r\n\r\n    const detections = await faceapi.detectAllFaces(img, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n    if (!detections || detections.length === 0) return false;\r\n    const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\r\n    faceapi.draw.drawDetections(canvas, resizedDetections);\r\n    return true;\r\n};"
  ],
  "names": [
    "VideoElement",
    "video",
    "useAppContext",
    "useEffect",
    "async",
    "__init",
    "loadModels",
    "init",
    "trackChanges",
    "handleVisibilityChange",
    "_document$querySelect",
    "document",
    "hidden",
    "stopVideo",
    "querySelector",
    "remove",
    "cancelAnimationFrame",
    "current",
    "requestAnimationFrame",
    "addEventListener",
    "_document$querySelect2",
    "removeEventListener",
    "_jsx",
    "className",
    "children",
    "id",
    "width",
    "height",
    "autoPlay",
    "muted",
    "axios",
    "create",
    "baseURL",
    "process",
    "API_URL",
    "timeout",
    "headers",
    "getUser",
    "fD",
    "instance",
    "post",
    "data",
    "error",
    "setUser",
    "UserCard",
    "user",
    "_jsxs",
    "_Fragment",
    "src",
    "img",
    "alt",
    "name",
    "email",
    "rollNo",
    "Login",
    "setError",
    "interval",
    "setInterval",
    "result",
    "getsnap",
    "getFaceData",
    "length",
    "handleLogin",
    "message",
    "type",
    "status",
    "setTimeout",
    "clearInterval",
    "getElementById",
    "MODEL_URL",
    "Promise",
    "all",
    "faceapi",
    "tinyFaceDetector",
    "loadFromUri",
    "faceLandmark68Net",
    "faceRecognitionNet",
    "ssdMobilenetv1",
    "then",
    "func",
    "catch",
    "console",
    "captureVideo",
    "draw_face",
    "constraints",
    "stream",
    "srcObject",
    "handleSuccess",
    "navigator",
    "mediaDevices",
    "getUserMedia",
    "handleError",
    "canvas",
    "querySelectorAll",
    "style",
    "position",
    "zIndex",
    "top",
    "offsetTop",
    "left",
    "offsetLeft",
    "body",
    "append",
    "displaySize",
    "detections",
    "withFaceLandmarks",
    "withFaceDescriptors",
    "resizedDetections",
    "getContext",
    "clearRect",
    "getTracks",
    "forEach",
    "track",
    "stop",
    "Array",
    "from",
    "c",
    "createElement",
    "videoWidth",
    "videoHeight",
    "drawImage",
    "toDataURL",
    "getImgData",
    "image",
    "map",
    "detection",
    "descriptor",
    "landmarks",
    "detectimg",
    "draw_face_img"
  ],
  "sourceRoot": ""
}
