{
  "version": 3,
  "file": "static/js/471.4622abba.chunk.js",
  "mappings": "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",
  "sources": [
    "components/videoElement.jsx",
    "utils/axios.js",
    "controls/axios_ctrl.js",
    "pages/Register.jsx",
    "utils/face_detect.js"
  ],
  "sourcesContent": [
    "import React, { useEffect } from \"react\";\r\nimport { getsnap, init, loadModels, stopVideo } from \"../utils/face_detect\";\r\nimport \"../styles/videoElement.css\";\r\nimport { useAppContext } from \"../configs/AppContext\";\r\n\r\nexport async function getSnap() {\r\n    return await getsnap();\r\n}\r\n\r\nexport default function VideoElement() {\r\n  const { video } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    async function __init() {\r\n        //   await init();\r\n        await loadModels(init);\r\n      trackChanges();\r\n    }\r\n\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) {\r\n        stopVideo();\r\n        document.querySelector(\"canvas\")?.remove();\r\n        cancelAnimationFrame(video.current);\r\n      } else {\r\n        __init();\r\n      }\r\n    };\r\n\r\n    const trackChanges = () => {\r\n      video.current = requestAnimationFrame(trackChanges);\r\n    };\r\n\r\n    document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n    __init();\r\n\r\n    return () => {\r\n      document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n      stopVideo();\r\n      document.querySelector(\"canvas\")?.remove();\r\n      cancelAnimationFrame(video.current);\r\n    };\r\n  }, [video]);\r\n\r\n  return (\r\n    <div className=\"video_container\">\r\n      <video\r\n        id=\"facecam\"\r\n        width=\"680\"\r\n        height=\"560\"\r\n        className=\"\"\r\n        autoPlay\r\n        muted\r\n      ></video>\r\n    </div>\r\n  );\r\n}",
    "import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.API_URL || 'http://localhost:8000',\r\n    timeout: 1000,\r\n    headers: { 'X-Custom-Header': 'foobar' }\r\n});\r\n\r\nexport default instance;",
    "import instance from '../utils/axios';\r\n\r\nexport async function getUser(fD) {\r\n    try {\r\n        // console.log(fD);\r\n        const res = await instance.post('/login', {fD});\r\n        return res.data;\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport async function setUser(fD) {\r\n    try {\r\n        const res = await instance.post('/register', fD);\r\n        return res.data;\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}",
    "import React, { useEffect, useState } from \"react\";\r\nimport VideoElement from \"../components/videoElement.jsx\";\r\nimport { getImgData, detectimg, getsnap } from \"../utils/face_detect\";\r\nimport { useAppContext } from \"../configs/AppContext\";\r\nimport { setUser } from \"../controls/axios_ctrl\";\r\nimport \"../styles/Register.css\";\r\n\r\nexport default function Register() {\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [rollNo, setRollNo] = useState('');\r\n    const [camera, setCamera] = useState(false);\r\n    const [upload, setUpload] = useState(false);\r\n    const [img, setImg] = useState(null);\r\n    const { setError } = useAppContext();\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (!name || !email || !rollNo) {\r\n            setError({\r\n                type: \"danger\",\r\n                message: \"Please fill all the fields\",\r\n                status: 400,\r\n                stack: \"Please fill all the fields to register\",\r\n            });\r\n            return;\r\n        }\r\n        if (!img) {\r\n            setError({\r\n                type: \"danger\",\r\n                message: \"Please upload an image\",\r\n                status: 400,\r\n                stack: \"Please upload an image with a face\",\r\n            });\r\n            return;\r\n        }\r\n        const faceData = (await getImgData(img));\r\n        // const faceData = await loadModels(await getImgData(img));\r\n        if (!faceData || faceData.length === 0) {\r\n            setError({\r\n                message: \"No face detected\",\r\n                status: 400,\r\n            });\r\n            setImg(null);\r\n            document.getElementsByTagName(\"input\")[0].value = \"\";\r\n            return;\r\n        }\r\n        await setUser({ name, email, rollNo, img, faceData });\r\n        setError({\r\n            type: \"success\",\r\n            message: \"User registered successfully\",\r\n            status: 200,\r\n            stack: \"User registered successfully\",\r\n        });\r\n        setImg(null);\r\n        setName('');\r\n        setEmail('');\r\n        setRollNo('');\r\n        setCamera(false);\r\n        setUpload(false);\r\n    }\r\n    const handleImg = () => {\r\n        setUpload(true);\r\n    }\r\n    const handleImgChange = async (e) => {\r\n        const file = e.target.files[0];\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            // console.log(reader.result);\r\n            setImg(reader.result);\r\n        }\r\n        reader.readAsDataURL(file);\r\n    }\r\n    const captureImg = async() => {\r\n        const image = await getsnap();\r\n        // const image = await loadModels(getsnap);\r\n        // console.log(image);\r\n        if (image) {\r\n            setImg(image);\r\n            setCamera(false);\r\n            setUpload(false);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (!img) { return; }\r\n        // console.log(img);\r\n        if (img) {\r\n            setUpload(false);\r\n            const imgElement = document.getElementById(\"FaceImg\");\r\n            const interval = setInterval(async() => {\r\n                if (imgElement.complete) {\r\n                    const result = await detectimg(imgElement);\r\n                    // const result = await loadModels(await detectimg(imgElement));\r\n                    // console.log(result);\r\n                    if (result) {\r\n                        setError({\r\n                            type: \"success\",\r\n                            message: \"Face detected\",\r\n                            status: 200,\r\n                            stack: \"Face detected successfully\",\r\n                        });\r\n                        clearInterval(interval);\r\n                    } else {\r\n                        setError({\r\n                            type: \"danger\",\r\n                            message: \"No face detected\",\r\n                            status: 400,\r\n                            stack: \"Please upload an image with a face\",\r\n                        });\r\n                        setImg(null);\r\n                        clearInterval(interval);\r\n                    }\r\n                }\r\n            }, 200);\r\n        } \r\n    }, [img, setError]);\r\n    return (\r\n        <div className=\"Register\">\r\n            <h1>Register</h1>\r\n            <div className=\"container-l\">\r\n                { camera &&\r\n                    <VideoElement />\r\n                }\r\n                <div className=\"container\">\r\n                    {upload &&\r\n                        <div className=\"upload\">\r\n                            {!camera && <input type=\"file\" accept=\"image/*\" onChange={handleImgChange}/>}\r\n                            <button type=\"button\" onClick={() => {\r\n                                if (!camera) setCamera(true);\r\n                                else captureImg();\r\n                            }}>Capture</button>\r\n                        </div>\r\n                    }\r\n                    <form onSubmit={handleSubmit}>\r\n                        {img && <img id=\"FaceImg\" src={img} alt=\"img\" />}\r\n                        <input type=\"text\" placeholder=\"Name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                        <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                        <input type=\"text\" placeholder=\"Roll No\" value={rollNo} onChange={(e) => setRollNo(e.target.value)} />\r\n                        {!img && <button type=\"button\" onClick={handleImg}>Upload</button>}\r\n                        <button type=\"submit\">Register</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
    "import * as faceapi from 'face-api.js';\r\nvar video = document.getElementById(\"facecam\");\r\n\r\nexport const loadModels = async (func) => {\r\n    const MODEL_URL = \"./models\";\r\n    \r\n    try {\r\n        await Promise.all([\r\n            // faceapi.nets.tinyYolov2.loadFromUri(MODEL_URL),\r\n            faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\r\n            faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\r\n            faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\r\n            faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL),\r\n        ]).then(async() => {\r\n            // console.log(\"Models loaded successfully\");\r\n            return await func();\r\n        }).catch((error) => {\r\n            console.error(\"Error loading models:\", error);\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error loading models:\", error);\r\n    }\r\n};\r\n\r\nexport const init = async () => {\r\n    await captureVideo();\r\n    if (video) {\r\n        video.addEventListener(\"play\", async() => {\r\n            await draw_face();\r\n        });\r\n        return video;\r\n    }\r\n};\r\n\r\nconst handleSuccess = (stream) => {\r\n    video = document.getElementById(\"facecam\");\r\n    video.srcObject = stream;\r\n};\r\n\r\nconst handleError = (error) => {\r\n    console.error(\"Error accessing media devices.\", error);\r\n};\r\n\r\nexport const captureVideo = async () => {\r\n    const constraints = {\r\n        video: true,\r\n    };\r\n    try {\r\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n        handleSuccess(stream);\r\n    } catch (error) {\r\n        handleError(error);\r\n    }\r\n};\r\n\r\nexport const draw_face = async () => {\r\n    if (!video) return;\r\n    const canvas = faceapi.createCanvasFromMedia(video);\r\n    if (!(document.querySelectorAll(\"canvas\").length > 0)) {\r\n        video.style.position = \"relative\";\r\n        video.style.zIndex = \"1\";\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.zIndex = \"1000\";\r\n        canvas.style.top = video.offsetTop + \"px\";\r\n        canvas.style.left = video.offsetLeft + \"px\";\r\n\r\n        document.body.append(canvas);\r\n    }\r\n    const displaySize = { width: video.width, height: video.height };\r\n    faceapi.matchDimensions(canvas, displaySize);\r\n\r\n    setInterval(async () => {\r\n        const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n        const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n        canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\r\n        faceapi.draw.drawDetections(canvas, resizedDetections);\r\n    }, 200);\r\n\r\n};\r\n\r\nexport const loadFace = (faceData) => {\r\n\r\n    if (!faceData || !faceData[0].descriptor || typeof faceData[0].descriptor !== 'object') {\r\n        console.log(typeof faceData[0].descriptor);\r\n        return null;\r\n    }\r\n\r\n    const descriptorArray = Object.values(faceData[0].descriptor);\r\n    const descriptor = [new Float32Array(descriptorArray)];\r\n    return [new faceapi.LabeledFaceDescriptors(faceData.name, descriptor)];\r\n};\r\n\r\nexport const compare_face = async (fD) => {\r\n    if (!video) return false;\r\n    // console.log(fD);\r\n    const faceData = loadFace(fD);\r\n    if (!faceData) return false;\r\n    // console.log(faceData);\r\n    const singleResult = await faceapi.detectSingleFace(video).withFaceLandmarks().withFaceDescriptor();\r\n    if (!singleResult) return false;\r\n    const faceMatcher = new faceapi.FaceMatcher(faceData);\r\n    const bestMatch = faceMatcher.findBestMatch(singleResult.descriptor);\r\n    if (bestMatch.distance < 0.5) {\r\n        return { name: fD.name, email: fD.email, rollNo: fD.rollNo, img: fD.img };\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const stopVideo = () => {\r\n    if (video && video.srcObject) {\r\n        // console.log(video.srcObject);\r\n        const stream = video.srcObject;\r\n        const tracks = stream.getTracks();\r\n        tracks.forEach(track => track.stop());\r\n    }\r\n};\r\n\r\nexport const getsnap = async () => {\r\n    if (!video) return;\r\n    Array.from(document.querySelectorAll(\"canvas\")).forEach((c) => c.remove());\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    const context = canvas.getContext(\"2d\");\r\n    context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\r\n    return canvas.toDataURL(\"image/jpeg\");\r\n    // return image;\r\n}\r\n\r\nexport const getImgData = async (image) => {\r\n    if (!image) return;\r\n    const img = await faceapi.fetchImage(image);\r\n    const detections = await faceapi.detectAllFaces(img, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n    if (!detections || detections.length === 0) return;\r\n    const result = detections.map((detection) => {\r\n        return {\r\n            descriptor: detection.descriptor,\r\n            landmarks: detection.landmarks,\r\n        };\r\n    });\r\n    return result;\r\n}\r\nexport const getFaceData = async () => {\r\n    if (!video) return;\r\n    const detections = await faceapi.detectAllFaces(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n    if (!detections || detections.length === 0) return;\r\n    const result = detections.map((detection) => {\r\n        return {\r\n            descriptor: detection.descriptor,\r\n            landmarks: detection.landmarks,\r\n        };\r\n    });\r\n    return result;\r\n};\r\n\r\nexport const getFaceLandmarks = async () => {\r\n    if (!video) return;\r\n    const detections = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks();\r\n    return detections;\r\n};\r\n\r\nexport const detectimg = async (img) => {\r\n    return draw_face_img(img);\r\n};\r\n\r\nexport const draw_face_img = async (img) => {\r\n    const canvas = faceapi.createCanvasFromMedia(img);\r\n    if (!(document.querySelectorAll(\"canvas\").length > 0)) {\r\n        img.style.zIndex = \"1\";\r\n        canvas.style.position = \"absolute\";\r\n        canvas.style.zIndex = \"1000\";\r\n        canvas.style.top = (img.offsetTop) + \"px\";\r\n        canvas.style.left = (img.offsetLeft) + \"px\";\r\n        // console.log(img.offsetTop, img.offsetLeft);\r\n        // console.log(canvas.style.top, canvas.style.left);\r\n\r\n        // document.body.append(canvas);\r\n    }\r\n    const displaySize = { width: img.width, height: img.height };\r\n    faceapi.matchDimensions(canvas, displaySize);\r\n\r\n    const detections = await faceapi.detectAllFaces(img, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptors();\r\n    if (!detections || detections.length === 0) return false;\r\n    const resizedDetections = faceapi.resizeResults(detections, displaySize);\r\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\r\n    faceapi.draw.drawDetections(canvas, resizedDetections);\r\n    return true;\r\n};"
  ],
  "names": [
    "VideoElement",
    "video",
    "useAppContext",
    "useEffect",
    "async",
    "__init",
    "loadModels",
    "init",
    "trackChanges",
    "handleVisibilityChange",
    "_document$querySelect",
    "document",
    "hidden",
    "stopVideo",
    "querySelector",
    "remove",
    "cancelAnimationFrame",
    "current",
    "requestAnimationFrame",
    "addEventListener",
    "_document$querySelect2",
    "removeEventListener",
    "_jsx",
    "className",
    "children",
    "id",
    "width",
    "height",
    "autoPlay",
    "muted",
    "axios",
    "create",
    "baseURL",
    "process",
    "API_URL",
    "timeout",
    "headers",
    "getUser",
    "fD",
    "instance",
    "post",
    "data",
    "error",
    "setUser",
    "Register",
    "name",
    "setName",
    "useState",
    "email",
    "setEmail",
    "rollNo",
    "setRollNo",
    "camera",
    "setCamera",
    "upload",
    "setUpload",
    "img",
    "setImg",
    "setError",
    "imgElement",
    "getElementById",
    "interval",
    "setInterval",
    "complete",
    "detectimg",
    "type",
    "message",
    "status",
    "stack",
    "clearInterval",
    "_jsxs",
    "accept",
    "onChange",
    "file",
    "e",
    "target",
    "files",
    "reader",
    "FileReader",
    "onload",
    "result",
    "readAsDataURL",
    "onClick",
    "image",
    "getsnap",
    "captureImg",
    "onSubmit",
    "preventDefault",
    "faceData",
    "getImgData",
    "length",
    "getElementsByTagName",
    "value",
    "src",
    "alt",
    "placeholder",
    "handleImg",
    "MODEL_URL",
    "Promise",
    "all",
    "faceapi",
    "tinyFaceDetector",
    "loadFromUri",
    "faceLandmark68Net",
    "faceRecognitionNet",
    "ssdMobilenetv1",
    "then",
    "func",
    "catch",
    "console",
    "captureVideo",
    "draw_face",
    "constraints",
    "stream",
    "srcObject",
    "handleSuccess",
    "navigator",
    "mediaDevices",
    "getUserMedia",
    "handleError",
    "canvas",
    "querySelectorAll",
    "style",
    "position",
    "zIndex",
    "top",
    "offsetTop",
    "left",
    "offsetLeft",
    "body",
    "append",
    "displaySize",
    "detections",
    "withFaceLandmarks",
    "withFaceDescriptors",
    "resizedDetections",
    "getContext",
    "clearRect",
    "getTracks",
    "forEach",
    "track",
    "stop",
    "Array",
    "from",
    "c",
    "createElement",
    "videoWidth",
    "videoHeight",
    "drawImage",
    "toDataURL",
    "map",
    "detection",
    "descriptor",
    "landmarks",
    "getFaceData",
    "draw_face_img"
  ],
  "sourceRoot": ""
}
